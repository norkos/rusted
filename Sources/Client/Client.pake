append $sources Engine/Engine.cpp
append $sources Graphics/Graphics.cpp
append $sources Graphics/Raycast.cpp
append $sources Gui/Gui.cpp
append $sources Input/Input.cpp
append $sources Network/Connection.cpp
append $sources States/StateManager.cpp
append $sources States/StateDeployment.cpp
append $sources States/LoginState.cpp
append $sources States/EntitySelectState.cpp
append $sources States/PilotState.cpp
append $sources Services/RustedTimeService.cpp
append $sources Services/AuthorizationService.cpp
append $sources Services/PlayerActionService.cpp
append $sources Services/ObjectService.cpp
append $sources Services/EffectsService.cpp
append $sources Views/ObjectsView.cpp
append $sources Views/Camera.cpp
append $sources Views/PilotView.cpp
append $sources Views/ActionsView.cpp
append $sources Visuals/VisualObject.cpp
append $sources Visuals/VisualUniverse.cpp
append $sources Visuals/Effects.cpp
append $sources Visuals/MovingMeshEffect.cpp
append $sources Visuals/Explosion.cpp

append $libraries Common
append $libraries Cake
append $libraries RenderSystem_GLStatic
append $libraries OgreMainStatic
append $libraries Plugin_OctreeSceneManagerStatic
append $libraries Plugin_ParticleFXStatic
append $libraries MyGUIEngineStatic
append $libraries MyGUI.OgrePlatform
append $libraries OIS
append $libraries zziplib
append $libraries zlib
append $libraries freetype
append $libraries FreeImage
append $libraries $__configuration.socket_libraries
append $libraries $__configuration.misc_libraries
append $libraries $__configuration.graphic_libraries

append $library_dirs $OGRE.library_dirs

append $include_dirs ..
append $include_dirs ../External
append $include_dirs $Common.__path
append $include_dirs $boost.__path
append $include_dirs $gtest.__path
append $include_dirs $OGRE.include_dirs
append $include_dirs $MyGUI.include_dirs

append $dependencies Cake Common OGRE MyGUI Contents

append $resources runTestClient
append $resources runClient

target application Client \
    sources($sources main.cpp) \
    link_with($libraries) \
    library_dirs($library_dirs) \
    include_dirs($include_dirs) \
    compiler_flags($global_settings.compiler_flags) \
    depends_on($dependencies) \
    resources($resources $__configuration.resources)

target phony ClientZip \
    depends_on(Client) \
    run_before(./ClientZip.sh)

