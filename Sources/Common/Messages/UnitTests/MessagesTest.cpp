/* this file is autogenerated, do not edit! */

#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>

#include <iostream>

#include "Cake/Diagnostics/Logger.hpp"
#include <RustedCodec/SimpleWriteBuffer.hpp>
#include <RustedCodec/SimpleReadBuffer.hpp>

#include <Messages/Messages.hpp>

class MessagesTest : public CPPUNIT_NS::TestFixture
{
	CPPUNIT_TEST_SUITE (MessagesTest);
	CPPUNIT_TEST (testMessage_ServerVersionReq);
	CPPUNIT_TEST (testMessage_ServerVersionResp);
	CPPUNIT_TEST (testMessage_UserAuthorizationReq);
	CPPUNIT_TEST (testMessage_UserAuthorizationResp);
	CPPUNIT_TEST (testMessage_PlayerResourcesStatusReq);
	CPPUNIT_TEST (testMessage_PlayerResourcesStatusResp);
	CPPUNIT_TEST (testMessage_RustedTimeEpochReq);
	CPPUNIT_TEST (testMessage_RustedTimeEpochResp);
	CPPUNIT_TEST (testMessage_PlayerEntitiesStatusReq);
	CPPUNIT_TEST (testMessage_PlayerEntitiesStatusResp);
	CPPUNIT_TEST (testMessage_EntityGetInfoReq);
	CPPUNIT_TEST (testMessage_ShipInfo);
	CPPUNIT_TEST (testMessage_EntityChangeCourseReq);
	CPPUNIT_TEST (testMessage_StaticObjectStatusReq);
	CPPUNIT_TEST (testMessage_StaticObjectStatusResp);
	CPPUNIT_TEST (testMessage_StaticObjectInfoReq);
	CPPUNIT_TEST (testMessage_StaticObjectInfoResp);
	CPPUNIT_TEST_SUITE_END ();

protected:
	void testMessage_ServerVersionReq();
	void testMessage_ServerVersionResp();
	void testMessage_UserAuthorizationReq();
	void testMessage_UserAuthorizationResp();
	void testMessage_PlayerResourcesStatusReq();
	void testMessage_PlayerResourcesStatusResp();
	void testMessage_RustedTimeEpochReq();
	void testMessage_RustedTimeEpochResp();
	void testMessage_PlayerEntitiesStatusReq();
	void testMessage_PlayerEntitiesStatusResp();
	void testMessage_EntityGetInfoReq();
	void testMessage_ShipInfo();
	void testMessage_EntityChangeCourseReq();
	void testMessage_StaticObjectStatusReq();
	void testMessage_StaticObjectStatusResp();
	void testMessage_StaticObjectInfoReq();
	void testMessage_StaticObjectInfoResp();
};
CPPUNIT_TEST_SUITE_REGISTRATION (MessagesTest);

void MessagesTest::testMessage_ServerVersionReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::ServerVersionReq;

	ServerVersionReq inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<ServerVersionReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::ServerVersionReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<ServerVersionReq *>(outMessage.get());
}

void MessagesTest::testMessage_ServerVersionResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::ServerVersionResp;

	ServerVersionResp inMessage;
	inMessage.version = "some test string";

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<ServerVersionResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::ServerVersionResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<ServerVersionResp *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.version == dynamic_cast<ServerVersionResp *>(outMessage.get())->version);
}

void MessagesTest::testMessage_UserAuthorizationReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::UserAuthorizationReq;

	UserAuthorizationReq inMessage;
	inMessage.login = "some test string";
	inMessage.password = "some test string";

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<UserAuthorizationReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::UserAuthorizationReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<UserAuthorizationReq *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.login == dynamic_cast<UserAuthorizationReq *>(outMessage.get())->login);
	CPPUNIT_ASSERT(inMessage.password == dynamic_cast<UserAuthorizationReq *>(outMessage.get())->password);
}

void MessagesTest::testMessage_UserAuthorizationResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::UserAuthorizationResp;

	UserAuthorizationResp inMessage;
	inMessage.success = true;
	inMessage.player_id = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<UserAuthorizationResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::UserAuthorizationResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<UserAuthorizationResp *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.success == dynamic_cast<UserAuthorizationResp *>(outMessage.get())->success);
	CPPUNIT_ASSERT(inMessage.player_id == dynamic_cast<UserAuthorizationResp *>(outMessage.get())->player_id);
}

void MessagesTest::testMessage_PlayerResourcesStatusReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::PlayerResourcesStatusReq;

	PlayerResourcesStatusReq inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<PlayerResourcesStatusReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::PlayerResourcesStatusReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<PlayerResourcesStatusReq *>(outMessage.get());
}

void MessagesTest::testMessage_PlayerResourcesStatusResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::PlayerResourcesStatusResp;

	PlayerResourcesStatusResp inMessage;
	inMessage.carbon = 0xf00d;
	inMessage.uranium = 0xf00d;
	inMessage.credits = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<PlayerResourcesStatusResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::PlayerResourcesStatusResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<PlayerResourcesStatusResp *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.carbon == dynamic_cast<PlayerResourcesStatusResp *>(outMessage.get())->carbon);
	CPPUNIT_ASSERT(inMessage.uranium == dynamic_cast<PlayerResourcesStatusResp *>(outMessage.get())->uranium);
	CPPUNIT_ASSERT(inMessage.credits == dynamic_cast<PlayerResourcesStatusResp *>(outMessage.get())->credits);
}

void MessagesTest::testMessage_RustedTimeEpochReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::RustedTimeEpochReq;

	RustedTimeEpochReq inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<RustedTimeEpochReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::RustedTimeEpochReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<RustedTimeEpochReq *>(outMessage.get());
}

void MessagesTest::testMessage_RustedTimeEpochResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::RustedTimeEpochResp;

	RustedTimeEpochResp inMessage;
	inMessage.time = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<RustedTimeEpochResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::RustedTimeEpochResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<RustedTimeEpochResp *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.time == dynamic_cast<RustedTimeEpochResp *>(outMessage.get())->time);
}

void MessagesTest::testMessage_PlayerEntitiesStatusReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::PlayerEntitiesStatusReq;

	PlayerEntitiesStatusReq inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<PlayerEntitiesStatusReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::PlayerEntitiesStatusReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<PlayerEntitiesStatusReq *>(outMessage.get());
}

void MessagesTest::testMessage_PlayerEntitiesStatusResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::PlayerEntitiesStatusResp;

	PlayerEntitiesStatusResp inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<PlayerEntitiesStatusResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::PlayerEntitiesStatusResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<PlayerEntitiesStatusResp *>(outMessage.get());
}

void MessagesTest::testMessage_EntityGetInfoReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::EntityGetInfoReq;

	EntityGetInfoReq inMessage;
	inMessage.id = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<EntityGetInfoReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::EntityGetInfoReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<EntityGetInfoReq *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.id == dynamic_cast<EntityGetInfoReq *>(outMessage.get())->id);
}

void MessagesTest::testMessage_ShipInfo()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::ShipInfo;

	ShipInfo inMessage;
	inMessage.id = 0xf00d;
	inMessage.player_id = 0xf00d;
	inMessage.x = 0xf00d;
	inMessage.y = 0xf00d;
	inMessage.z = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<ShipInfo *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::ShipInfo, outMessage->getId());
	LOG_INFO << *dynamic_cast<ShipInfo *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.id == dynamic_cast<ShipInfo *>(outMessage.get())->id);
	CPPUNIT_ASSERT(inMessage.player_id == dynamic_cast<ShipInfo *>(outMessage.get())->player_id);
	CPPUNIT_ASSERT(inMessage.x == dynamic_cast<ShipInfo *>(outMessage.get())->x);
	CPPUNIT_ASSERT(inMessage.y == dynamic_cast<ShipInfo *>(outMessage.get())->y);
	CPPUNIT_ASSERT(inMessage.z == dynamic_cast<ShipInfo *>(outMessage.get())->z);
}

void MessagesTest::testMessage_EntityChangeCourseReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::EntityChangeCourseReq;

	EntityChangeCourseReq inMessage;
	inMessage.entityId = 0xf00d;
	inMessage.courseX = 0xf00d;
	inMessage.courseY = 0xf00d;
	inMessage.courseZ = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<EntityChangeCourseReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::EntityChangeCourseReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<EntityChangeCourseReq *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.entityId == dynamic_cast<EntityChangeCourseReq *>(outMessage.get())->entityId);
	CPPUNIT_ASSERT(inMessage.courseX == dynamic_cast<EntityChangeCourseReq *>(outMessage.get())->courseX);
	CPPUNIT_ASSERT(inMessage.courseY == dynamic_cast<EntityChangeCourseReq *>(outMessage.get())->courseY);
	CPPUNIT_ASSERT(inMessage.courseZ == dynamic_cast<EntityChangeCourseReq *>(outMessage.get())->courseZ);
}

void MessagesTest::testMessage_StaticObjectStatusReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::StaticObjectStatusReq;

	StaticObjectStatusReq inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<StaticObjectStatusReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::StaticObjectStatusReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<StaticObjectStatusReq *>(outMessage.get());
}

void MessagesTest::testMessage_StaticObjectStatusResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::StaticObjectStatusResp;

	StaticObjectStatusResp inMessage;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<StaticObjectStatusResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::StaticObjectStatusResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<StaticObjectStatusResp *>(outMessage.get());
}

void MessagesTest::testMessage_StaticObjectInfoReq()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::StaticObjectInfoReq;

	StaticObjectInfoReq inMessage;
	inMessage.staticObjectId = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<StaticObjectInfoReq *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::StaticObjectInfoReq, outMessage->getId());
	LOG_INFO << *dynamic_cast<StaticObjectInfoReq *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.staticObjectId == dynamic_cast<StaticObjectInfoReq *>(outMessage.get())->staticObjectId);
}

void MessagesTest::testMessage_StaticObjectInfoResp()
{
	using ::Common::RustedCodec::SimpleWriteBuffer;
	using ::Common::RustedCodec::SimpleReadBuffer;
	using ::Common::Messages::AbstractMessage;
	using ::Common::Messages::StaticObjectInfoResp;

	StaticObjectInfoResp inMessage;
	inMessage.staticObjectId = 0xf00d;
	inMessage.x = 0xf00d;
	inMessage.y = 0xf00d;
	inMessage.z = 0xf00d;

	std::vector<char> raw_buf;
	SimpleWriteBuffer buf(raw_buf);
	inMessage.serialize(buf);

	SimpleReadBuffer read_buf(raw_buf);
	std::auto_ptr<AbstractMessage> outMessage = ::Common::Messages::MessageFactory::create(read_buf);

	CPPUNIT_ASSERT(0 != dynamic_cast<StaticObjectInfoResp *>(outMessage.get()));
	CPPUNIT_ASSERT_EQUAL(::Common::Messages::Id::StaticObjectInfoResp, outMessage->getId());
	LOG_INFO << *dynamic_cast<StaticObjectInfoResp *>(outMessage.get());
	CPPUNIT_ASSERT(inMessage.staticObjectId == dynamic_cast<StaticObjectInfoResp *>(outMessage.get())->staticObjectId);
	CPPUNIT_ASSERT(inMessage.x == dynamic_cast<StaticObjectInfoResp *>(outMessage.get())->x);
	CPPUNIT_ASSERT(inMessage.y == dynamic_cast<StaticObjectInfoResp *>(outMessage.get())->y);
	CPPUNIT_ASSERT(inMessage.z == dynamic_cast<StaticObjectInfoResp *>(outMessage.get())->z);
}

